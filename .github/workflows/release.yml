name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: 'Release version'
      source_branch:
        required: true
        description: 'The source branch to pull code from'
        default: 'main'
      target_branch:
        required: true
        description: 'The target branch to push the release build to'
        default: 'releases'

jobs:
  release_pr:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Fetch files and ensure branches exist
        run: |
          git fetch origin
          if [ -f .git/shallow ]; then
              echo "Shallow repo clone, unshallowing"
              git fetch --unshallow
          fi
          git fetch --tags
          
          # Check if the source branch exists locally
          if git rev-parse --verify ${{ github.event.inputs.source_branch }} >/dev/null 2>&1; then
              git checkout ${{ github.event.inputs.source_branch }}
          # If not, check remotely and create it locally
          elif git ls-remote --heads origin ${{ github.event.inputs.source_branch }} | grep ${{ github.event.inputs.source_branch }} >/dev/null 2>&1; then
              git checkout -b ${{ github.event.inputs.source_branch }} origin/${{ github.event.inputs.source_branch }}
          else
              echo "Source branch ${{ github.event.inputs.source_branch }} does not exist!"
              exit 1
          fi
          
          # Check if the target branch exists locally
          if git rev-parse --verify ${{ github.event.inputs.target_branch }} >/dev/null 2>&1; then
              git checkout ${{ github.event.inputs.target_branch }}
          # If not, check remotely and create it locally
          elif git ls-remote --heads origin ${{ github.event.inputs.target_branch }} | grep ${{ github.event.inputs.target_branch }} >/dev/null 2>&1; then
              git checkout -b ${{ github.event.inputs.target_branch }} origin/${{ github.event.inputs.target_branch }}
          # Otherwise, create a new target branch locally
          else
              git checkout -b ${{ github.event.inputs.target_branch }}
          fi

      - name: Export source branch as environment variable
        run: echo "SOURCE_BRANCH=${{ github.event.inputs.source_branch }}" >> $GITHUB_ENV

      - name: Collect commit ranges
        run: |
          bash ./scripts/changelog.sh > ${{ github.workspace }}/CHANGELOG.txt

      - name: Debug changelog file
        run: |
          ls -la ${{ github.workspace }}/CHANGELOG.txt
          cat ${{ github.workspace }}/CHANGELOG.txt
          echo "Current tag is: $(git rev-list --tags --max-count=1)"

      - name: Checkout code from source branch into target branch
        run: |
          # Checkout the code from the source branch onto the target branch
          git checkout ${{ github.event.inputs.source_branch }} -- .

      - name: Build release
        run: |
          npm ci
          npm run build

      - name: Check in files
        run: |
          git add -f build/

      - name: Commit build files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Release build ${{ github.event.inputs.version }} [ci release]'
          commit_options: '--allow-empty'
          skip_checkout: true
          branch: '${{ github.event.inputs.target_branch }}'

      - name: Debug changelog file
        run: |
          ls -la ${{ github.workspace }}/CHANGELOG.txt
          cat ${{ github.workspace }}/CHANGELOG.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}/CHANGELOG.txt
          draft: false
          prerelease: false
          tag_name: ${{ github.event.inputs.version }}
          target_commitish: '${{ github.event.inputs.target_branch }}'